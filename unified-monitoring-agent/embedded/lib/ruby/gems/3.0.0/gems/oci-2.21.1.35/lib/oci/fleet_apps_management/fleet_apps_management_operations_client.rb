# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230831

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Fleet Application Management Service API. Use this API to for all FAMS related activities.
  # To manage fleets,view complaince report for the Fleet,scedule patches and other lifecycle activities
  class FleetAppsManagement::FleetAppsManagementOperationsClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new FleetAppsManagementOperationsClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20230831'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "FleetAppsManagementOperationsClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://fams.{region}.oci.{secondLevelDomain}') + '/20230831'
      logger.info "FleetAppsManagementOperationsClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new SchedulerDefinition.
    #
    # @param [OCI::FleetAppsManagement::Models::CreateSchedulerDefinitionDetails] create_scheduler_definition_details Details for the new SchedulerDefinition.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::SchedulerDefinition SchedulerDefinition}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/create_scheduler_definition.rb.html) to see an example of how to use create_scheduler_definition API.
    def create_scheduler_definition(create_scheduler_definition_details, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#create_scheduler_definition.' if logger

      raise "Missing the required parameter 'create_scheduler_definition_details' when calling create_scheduler_definition." if create_scheduler_definition_details.nil?

      path = '/schedulerDefinitions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_scheduler_definition_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#create_scheduler_definition') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::SchedulerDefinition'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a SchedulerDefinition resource by identifier
    # @param [String] scheduler_definition_id unique SchedulerDefinition identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/delete_scheduler_definition.rb.html) to see an example of how to use delete_scheduler_definition API.
    def delete_scheduler_definition(scheduler_definition_id, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#delete_scheduler_definition.' if logger

      raise "Missing the required parameter 'scheduler_definition_id' when calling delete_scheduler_definition." if scheduler_definition_id.nil?
      raise "Parameter value for 'scheduler_definition_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_definition_id)

      path = '/schedulerDefinitions/{schedulerDefinitionId}'.sub('{schedulerDefinitionId}', scheduler_definition_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#delete_scheduler_definition') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a SchedulerJob resource by identifier
    # @param [String] scheduler_job_id unique SchedulerJob identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/delete_scheduler_job.rb.html) to see an example of how to use delete_scheduler_job API.
    def delete_scheduler_job(scheduler_job_id, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#delete_scheduler_job.' if logger

      raise "Missing the required parameter 'scheduler_job_id' when calling delete_scheduler_job." if scheduler_job_id.nil?
      raise "Parameter value for 'scheduler_job_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_job_id)

      path = '/schedulerJobs/{schedulerJobId}'.sub('{schedulerJobId}', scheduler_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#delete_scheduler_job') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a JobActivity by identifier
    # @param [String] scheduler_job_id unique SchedulerJob identifier
    # @param [String] job_activity_id unique jobActivity identifier
    # @param [String] resource_id unique Resource identifier
    # @param [String] execution_id Execution Id
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::Execution Execution}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/get_execution.rb.html) to see an example of how to use get_execution API.
    def get_execution(scheduler_job_id, job_activity_id, resource_id, execution_id, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#get_execution.' if logger

      raise "Missing the required parameter 'scheduler_job_id' when calling get_execution." if scheduler_job_id.nil?
      raise "Missing the required parameter 'job_activity_id' when calling get_execution." if job_activity_id.nil?
      raise "Missing the required parameter 'resource_id' when calling get_execution." if resource_id.nil?
      raise "Missing the required parameter 'execution_id' when calling get_execution." if execution_id.nil?
      raise "Parameter value for 'scheduler_job_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_job_id)
      raise "Parameter value for 'job_activity_id' must not be blank" if OCI::Internal::Util.blank_string?(job_activity_id)
      raise "Parameter value for 'resource_id' must not be blank" if OCI::Internal::Util.blank_string?(resource_id)
      raise "Parameter value for 'execution_id' must not be blank" if OCI::Internal::Util.blank_string?(execution_id)

      path = '/schedulerJobs/{schedulerJobId}/jobActivities/{jobActivityId}/resources/{resourceId}/executions/{executionId}'.sub('{schedulerJobId}', scheduler_job_id.to_s).sub('{jobActivityId}', job_activity_id.to_s).sub('{resourceId}', resource_id.to_s).sub('{executionId}', execution_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#get_execution') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::Execution'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a JobActivity by identifier
    # @param [String] scheduler_job_id unique SchedulerJob identifier
    # @param [String] job_activity_id unique jobActivity identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::JobActivity JobActivity}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/get_job_activity.rb.html) to see an example of how to use get_job_activity API.
    def get_job_activity(scheduler_job_id, job_activity_id, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#get_job_activity.' if logger

      raise "Missing the required parameter 'scheduler_job_id' when calling get_job_activity." if scheduler_job_id.nil?
      raise "Missing the required parameter 'job_activity_id' when calling get_job_activity." if job_activity_id.nil?
      raise "Parameter value for 'scheduler_job_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_job_id)
      raise "Parameter value for 'job_activity_id' must not be blank" if OCI::Internal::Util.blank_string?(job_activity_id)

      path = '/schedulerJobs/{schedulerJobId}/jobActivities/{jobActivityId}'.sub('{schedulerJobId}', scheduler_job_id.to_s).sub('{jobActivityId}', job_activity_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#get_job_activity') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::JobActivity'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a SchedulerDefinition by identifier
    # @param [String] scheduler_definition_id unique SchedulerDefinition identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::SchedulerDefinition SchedulerDefinition}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/get_scheduler_definition.rb.html) to see an example of how to use get_scheduler_definition API.
    def get_scheduler_definition(scheduler_definition_id, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#get_scheduler_definition.' if logger

      raise "Missing the required parameter 'scheduler_definition_id' when calling get_scheduler_definition." if scheduler_definition_id.nil?
      raise "Parameter value for 'scheduler_definition_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_definition_id)

      path = '/schedulerDefinitions/{schedulerDefinitionId}'.sub('{schedulerDefinitionId}', scheduler_definition_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#get_scheduler_definition') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::SchedulerDefinition'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a SchedulerJob by identifier
    # @param [String] scheduler_job_id unique SchedulerJob identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::SchedulerJob SchedulerJob}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/get_scheduler_job.rb.html) to see an example of how to use get_scheduler_job API.
    def get_scheduler_job(scheduler_job_id, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#get_scheduler_job.' if logger

      raise "Missing the required parameter 'scheduler_job_id' when calling get_scheduler_job." if scheduler_job_id.nil?
      raise "Parameter value for 'scheduler_job_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_job_id)

      path = '/schedulerJobs/{schedulerJobId}'.sub('{schedulerJobId}', scheduler_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#get_scheduler_job') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::SchedulerJob'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Task Executions for a Resource.
    # @param [String] scheduler_job_id unique SchedulerJob identifier
    # @param [String] job_activity_id unique jobActivity identifier
    # @param [String] resource_id unique Resource identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :resource_task_id Task Id
    # @option opts [String] :step_name Unique step name
    # @option opts [String] :target_name Unique target name
    # @option opts [String] :sequence Task Order Sequence
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeStarted is descending.
    #    (default to timeStarted)
    #   Allowed values are: timeStarted
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::ExecutionCollection ExecutionCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/list_executions.rb.html) to see an example of how to use list_executions API.
    def list_executions(scheduler_job_id, job_activity_id, resource_id, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#list_executions.' if logger

      raise "Missing the required parameter 'scheduler_job_id' when calling list_executions." if scheduler_job_id.nil?
      raise "Missing the required parameter 'job_activity_id' when calling list_executions." if job_activity_id.nil?
      raise "Missing the required parameter 'resource_id' when calling list_executions." if resource_id.nil?

      if opts[:sort_order] && !OCI::FleetAppsManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::FleetAppsManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeStarted].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeStarted.'
      end
      raise "Parameter value for 'scheduler_job_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_job_id)
      raise "Parameter value for 'job_activity_id' must not be blank" if OCI::Internal::Util.blank_string?(job_activity_id)
      raise "Parameter value for 'resource_id' must not be blank" if OCI::Internal::Util.blank_string?(resource_id)

      path = '/schedulerJobs/{schedulerJobId}/jobActivities/{jobActivityId}/resources/{resourceId}/executions'.sub('{schedulerJobId}', scheduler_job_id.to_s).sub('{jobActivityId}', job_activity_id.to_s).sub('{resourceId}', resource_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:resourceTaskId] = opts[:resource_task_id] if opts[:resource_task_id]
      query_params[:stepName] = opts[:step_name] if opts[:step_name]
      query_params[:targetName] = opts[:target_name] if opts[:target_name]
      query_params[:sequence] = opts[:sequence] if opts[:sequence]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#list_executions') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::ExecutionCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of ScheduledFleets
    #
    # @param [String] scheduler_definition_id unique SchedulerDefinition identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for displayName is ascending.
    #    (default to displayName)
    #   Allowed values are: displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::ScheduledFleetCollection ScheduledFleetCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/list_scheduled_fleets.rb.html) to see an example of how to use list_scheduled_fleets API.
    def list_scheduled_fleets(scheduler_definition_id, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#list_scheduled_fleets.' if logger

      raise "Missing the required parameter 'scheduler_definition_id' when calling list_scheduled_fleets." if scheduler_definition_id.nil?

      if opts[:sort_order] && !OCI::FleetAppsManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::FleetAppsManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of displayName.'
      end
      raise "Parameter value for 'scheduler_definition_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_definition_id)

      path = '/schedulerDefinitions/{schedulerDefinitionId}/scheduledFleets'.sub('{schedulerDefinitionId}', scheduler_definition_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#list_scheduled_fleets') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::ScheduledFleetCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of SchedulerDefinitions.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :lifecycle_state A filter to return only resources their lifecycleState matches the given lifecycleState.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [String] :product A filter to return only Scheduler Definitions whose assocaited product matches the given product
    # @option opts [String] :id unique SchedulerDefinition identifier
    # @option opts [String] :maintenance_window_id unique MaintenanceWindow identifier
    # @option opts [String] :fleet_id unique Fleet identifier
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated and timeOfNextRun is descending. Default order for displayName is ascending.
    #    (default to displayName)
    #   Allowed values are: timeCreated, displayName, timeOfNextRun
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::SchedulerDefinitionCollection SchedulerDefinitionCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/list_scheduler_definitions.rb.html) to see an example of how to use list_scheduler_definitions API.
    def list_scheduler_definitions(opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#list_scheduler_definitions.' if logger


      if opts[:lifecycle_state] && !OCI::FleetAppsManagement::Models::SchedulerDefinition::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::FleetAppsManagement::Models::SchedulerDefinition::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::FleetAppsManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::FleetAppsManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName timeOfNextRun].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName, timeOfNextRun.'
      end

      path = '/schedulerDefinitions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:product] = opts[:product] if opts[:product]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:maintenanceWindowId] = opts[:maintenance_window_id] if opts[:maintenance_window_id]
      query_params[:fleetId] = opts[:fleet_id] if opts[:fleet_id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#list_scheduler_definitions') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::SchedulerDefinitionCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of SchedulerJobs.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :lifecycle_state A filter to return only resources their lifecycleState matches the given lifecycleState.
    # @option opts [String] :fleet_id unique Fleet identifier
    # @option opts [DateTime] :time_scheduled_greater_than_or_equal_to Scheduled Time
    # @option opts [DateTime] :time_scheduled_less_than Scheduled Time
    # @option opts [BOOLEAN] :is_remediation_job_needed Fetch next remediation Job
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [String] :id unique SchedulerJob identifier
    # @option opts [String] :defintion_id SchedulerJob Definition identifier
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated and timeScheduled is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, timeScheduled, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::SchedulerJobCollection SchedulerJobCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/list_scheduler_jobs.rb.html) to see an example of how to use list_scheduler_jobs API.
    def list_scheduler_jobs(opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#list_scheduler_jobs.' if logger


      if opts[:lifecycle_state] && !OCI::FleetAppsManagement::Models::SchedulerJob::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::FleetAppsManagement::Models::SchedulerJob::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::FleetAppsManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::FleetAppsManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated timeScheduled displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, timeScheduled, displayName.'
      end

      path = '/schedulerJobs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:fleetId] = opts[:fleet_id] if opts[:fleet_id]
      query_params[:timeScheduledGreaterThanOrEqualTo] = opts[:time_scheduled_greater_than_or_equal_to] if opts[:time_scheduled_greater_than_or_equal_to]
      query_params[:timeScheduledLessThan] = opts[:time_scheduled_less_than] if opts[:time_scheduled_less_than]
      query_params[:isRemediationJobNeeded] = opts[:is_remediation_job_needed] if !opts[:is_remediation_job_needed].nil?
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:defintionId] = opts[:defintion_id] if opts[:defintion_id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#list_scheduler_jobs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::SchedulerJobCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the SchedulerDefinition
    # @param [String] scheduler_definition_id unique SchedulerDefinition identifier
    # @param [OCI::FleetAppsManagement::Models::UpdateSchedulerDefinitionDetails] update_scheduler_definition_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/update_scheduler_definition.rb.html) to see an example of how to use update_scheduler_definition API.
    def update_scheduler_definition(scheduler_definition_id, update_scheduler_definition_details, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#update_scheduler_definition.' if logger

      raise "Missing the required parameter 'scheduler_definition_id' when calling update_scheduler_definition." if scheduler_definition_id.nil?
      raise "Missing the required parameter 'update_scheduler_definition_details' when calling update_scheduler_definition." if update_scheduler_definition_details.nil?
      raise "Parameter value for 'scheduler_definition_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_definition_id)

      path = '/schedulerDefinitions/{schedulerDefinitionId}'.sub('{schedulerDefinitionId}', scheduler_definition_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_scheduler_definition_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#update_scheduler_definition') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the SchedulerJob
    # @param [String] scheduler_job_id unique SchedulerJob identifier
    # @param [OCI::FleetAppsManagement::Models::UpdateSchedulerJobDetails] update_scheduler_job_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::FleetAppsManagement::Models::SchedulerJob SchedulerJob}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/fleetappsmanagement/update_scheduler_job.rb.html) to see an example of how to use update_scheduler_job API.
    def update_scheduler_job(scheduler_job_id, update_scheduler_job_details, opts = {})
      logger.debug 'Calling operation FleetAppsManagementOperationsClient#update_scheduler_job.' if logger

      raise "Missing the required parameter 'scheduler_job_id' when calling update_scheduler_job." if scheduler_job_id.nil?
      raise "Missing the required parameter 'update_scheduler_job_details' when calling update_scheduler_job." if update_scheduler_job_details.nil?
      raise "Parameter value for 'scheduler_job_id' must not be blank" if OCI::Internal::Util.blank_string?(scheduler_job_id)

      path = '/schedulerJobs/{schedulerJobId}'.sub('{schedulerJobId}', scheduler_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_scheduler_job_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'FleetAppsManagementOperationsClient#update_scheduler_job') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::FleetAppsManagement::Models::SchedulerJob'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
