# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230831
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Maintenance Window information to be updated.
  class FleetAppsManagement::Models::UpdateMaintenanceWindowDetails
    MAINTENANCE_WINDOW_TYPE_ENUM = [
      MAINTENANCE_WINDOW_TYPE_OPEN_ENDED = 'OPEN_ENDED'.freeze
    ].freeze

    # A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # Example: `My new resource`
    #
    # @return [String]
    attr_accessor :display_name

    # A user-friendly description. To provide some insight about the resource.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :description

    # MaintenanceWindow Identifier
    # @return [String]
    attr_reader :maintenance_window_type

    # Does the maintenenace window cause outage?
    # @return [BOOLEAN]
    attr_accessor :is_outage

    # Start time of schedule
    # @return [DateTime]
    attr_accessor :time_schedule_start

    # Duration if schedule type is Custom
    # @return [String]
    attr_accessor :duration

    # Is this is a recurring maintenance window
    # @return [BOOLEAN]
    attr_accessor :is_recurring

    # Recurrence rule specification if recurring
    # @return [String]
    attr_accessor :recurrences

    # Task initiation cutoff
    # @return [Integer]
    attr_accessor :task_initiation_cutoff

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'description': :'description',
        'maintenance_window_type': :'maintenanceWindowType',
        'is_outage': :'isOutage',
        'time_schedule_start': :'timeScheduleStart',
        'duration': :'duration',
        'is_recurring': :'isRecurring',
        'recurrences': :'recurrences',
        'task_initiation_cutoff': :'taskInitiationCutoff',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'description': :'String',
        'maintenance_window_type': :'String',
        'is_outage': :'BOOLEAN',
        'time_schedule_start': :'DateTime',
        'duration': :'String',
        'is_recurring': :'BOOLEAN',
        'recurrences': :'String',
        'task_initiation_cutoff': :'Integer',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :maintenance_window_type The value to assign to the {#maintenance_window_type} property
    # @option attributes [BOOLEAN] :is_outage The value to assign to the {#is_outage} property
    # @option attributes [DateTime] :time_schedule_start The value to assign to the {#time_schedule_start} property
    # @option attributes [String] :duration The value to assign to the {#duration} property
    # @option attributes [BOOLEAN] :is_recurring The value to assign to the {#is_recurring} property
    # @option attributes [String] :recurrences The value to assign to the {#recurrences} property
    # @option attributes [Integer] :task_initiation_cutoff The value to assign to the {#task_initiation_cutoff} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.maintenance_window_type = attributes[:'maintenanceWindowType'] if attributes[:'maintenanceWindowType']

      raise 'You cannot provide both :maintenanceWindowType and :maintenance_window_type' if attributes.key?(:'maintenanceWindowType') && attributes.key?(:'maintenance_window_type')

      self.maintenance_window_type = attributes[:'maintenance_window_type'] if attributes[:'maintenance_window_type']

      self.is_outage = attributes[:'isOutage'] unless attributes[:'isOutage'].nil?
      self.is_outage = false if is_outage.nil? && !attributes.key?(:'isOutage') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isOutage and :is_outage' if attributes.key?(:'isOutage') && attributes.key?(:'is_outage')

      self.is_outage = attributes[:'is_outage'] unless attributes[:'is_outage'].nil?
      self.is_outage = false if is_outage.nil? && !attributes.key?(:'isOutage') && !attributes.key?(:'is_outage') # rubocop:disable Style/StringLiterals

      self.time_schedule_start = attributes[:'timeScheduleStart'] if attributes[:'timeScheduleStart']

      raise 'You cannot provide both :timeScheduleStart and :time_schedule_start' if attributes.key?(:'timeScheduleStart') && attributes.key?(:'time_schedule_start')

      self.time_schedule_start = attributes[:'time_schedule_start'] if attributes[:'time_schedule_start']

      self.duration = attributes[:'duration'] if attributes[:'duration']

      self.is_recurring = attributes[:'isRecurring'] unless attributes[:'isRecurring'].nil?
      self.is_recurring = false if is_recurring.nil? && !attributes.key?(:'isRecurring') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isRecurring and :is_recurring' if attributes.key?(:'isRecurring') && attributes.key?(:'is_recurring')

      self.is_recurring = attributes[:'is_recurring'] unless attributes[:'is_recurring'].nil?
      self.is_recurring = false if is_recurring.nil? && !attributes.key?(:'isRecurring') && !attributes.key?(:'is_recurring') # rubocop:disable Style/StringLiterals

      self.recurrences = attributes[:'recurrences'] if attributes[:'recurrences']

      self.task_initiation_cutoff = attributes[:'taskInitiationCutoff'] if attributes[:'taskInitiationCutoff']

      raise 'You cannot provide both :taskInitiationCutoff and :task_initiation_cutoff' if attributes.key?(:'taskInitiationCutoff') && attributes.key?(:'task_initiation_cutoff')

      self.task_initiation_cutoff = attributes[:'task_initiation_cutoff'] if attributes[:'task_initiation_cutoff']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maintenance_window_type Object to be assigned
    def maintenance_window_type=(maintenance_window_type)
      raise "Invalid value for 'maintenance_window_type': this must be one of the values in MAINTENANCE_WINDOW_TYPE_ENUM." if maintenance_window_type && !MAINTENANCE_WINDOW_TYPE_ENUM.include?(maintenance_window_type)

      @maintenance_window_type = maintenance_window_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        description == other.description &&
        maintenance_window_type == other.maintenance_window_type &&
        is_outage == other.is_outage &&
        time_schedule_start == other.time_schedule_start &&
        duration == other.duration &&
        is_recurring == other.is_recurring &&
        recurrences == other.recurrences &&
        task_initiation_cutoff == other.task_initiation_cutoff &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, description, maintenance_window_type, is_outage, time_schedule_start, duration, is_recurring, recurrences, task_initiation_cutoff, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
