# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230831
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Action Group.
  class FleetAppsManagement::Models::ActionGroup
    TYPE_ENUM = [
      TYPE_PRODUCT = 'PRODUCT'.freeze,
      TYPE_ENVIRONMENT = 'ENVIRONMENT'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Provide the ID of the resource; Ex- fleetId.
    # @return [String]
    attr_accessor :resource_id

    # ActionGroup Type associated.
    # @return [String]
    attr_reader :type

    # Application Type associated.
    # Only applicable if type is ENVIRONMENT.
    #
    # @return [String]
    attr_accessor :application_type

    # Product associated.
    # Only applicable if type is PRODUCT.
    #
    # @return [String]
    attr_accessor :product

    # LifeCycle Operation
    # @return [String]
    attr_accessor :lifecycle_operation

    # **[Required]** ID of the runbook
    # @return [String]
    attr_accessor :runbook_id

    # Provide the target if schedule is created against the target
    # @return [String]
    attr_accessor :target_id

    # Provide subjects that need to be considered for the schedule.
    # @return [Array<String>]
    attr_accessor :subjects

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'resource_id': :'resourceId',
        'type': :'type',
        'application_type': :'applicationType',
        'product': :'product',
        'lifecycle_operation': :'lifecycleOperation',
        'runbook_id': :'runbookId',
        'target_id': :'targetId',
        'subjects': :'subjects'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'resource_id': :'String',
        'type': :'String',
        'application_type': :'String',
        'product': :'String',
        'lifecycle_operation': :'String',
        'runbook_id': :'String',
        'target_id': :'String',
        'subjects': :'Array<String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :resource_id The value to assign to the {#resource_id} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :application_type The value to assign to the {#application_type} property
    # @option attributes [String] :product The value to assign to the {#product} property
    # @option attributes [String] :lifecycle_operation The value to assign to the {#lifecycle_operation} property
    # @option attributes [String] :runbook_id The value to assign to the {#runbook_id} property
    # @option attributes [String] :target_id The value to assign to the {#target_id} property
    # @option attributes [Array<String>] :subjects The value to assign to the {#subjects} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.resource_id = attributes[:'resourceId'] if attributes[:'resourceId']

      raise 'You cannot provide both :resourceId and :resource_id' if attributes.key?(:'resourceId') && attributes.key?(:'resource_id')

      self.resource_id = attributes[:'resource_id'] if attributes[:'resource_id']

      self.type = attributes[:'type'] if attributes[:'type']

      self.application_type = attributes[:'applicationType'] if attributes[:'applicationType']

      raise 'You cannot provide both :applicationType and :application_type' if attributes.key?(:'applicationType') && attributes.key?(:'application_type')

      self.application_type = attributes[:'application_type'] if attributes[:'application_type']

      self.product = attributes[:'product'] if attributes[:'product']

      self.lifecycle_operation = attributes[:'lifecycleOperation'] if attributes[:'lifecycleOperation']

      raise 'You cannot provide both :lifecycleOperation and :lifecycle_operation' if attributes.key?(:'lifecycleOperation') && attributes.key?(:'lifecycle_operation')

      self.lifecycle_operation = attributes[:'lifecycle_operation'] if attributes[:'lifecycle_operation']

      self.runbook_id = attributes[:'runbookId'] if attributes[:'runbookId']

      raise 'You cannot provide both :runbookId and :runbook_id' if attributes.key?(:'runbookId') && attributes.key?(:'runbook_id')

      self.runbook_id = attributes[:'runbook_id'] if attributes[:'runbook_id']

      self.target_id = attributes[:'targetId'] if attributes[:'targetId']

      raise 'You cannot provide both :targetId and :target_id' if attributes.key?(:'targetId') && attributes.key?(:'target_id')

      self.target_id = attributes[:'target_id'] if attributes[:'target_id']

      self.subjects = attributes[:'subjects'] if attributes[:'subjects']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        resource_id == other.resource_id &&
        type == other.type &&
        application_type == other.application_type &&
        product == other.product &&
        lifecycle_operation == other.lifecycle_operation &&
        runbook_id == other.runbook_id &&
        target_id == other.target_id &&
        subjects == other.subjects
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [resource_id, type, application_type, product, lifecycle_operation, runbook_id, target_id, subjects].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
